# SageAttention Builder - Clean Windows multi-stage build for SageAttention wheels
# Architecture: runtime → builder → extraction → test

# Build arguments for version flexibility
ARG CUDA_VERSION=12.9.1
ARG PYTHON_VERSION=3.12
ARG TORCH_VERSION=2.8.0
ARG TORCH_CUDA_ARCH_LIST=8.0;8.6;8.9;9.0;12.0

# Stage 1: Runtime environment with PyTorch and dependencies
FROM mcr.microsoft.com/powershell:7.4-windowsservercore-ltsc2022 AS runtime

# Re-declare ARGs after FROM
ARG CUDA_VERSION
ARG PYTHON_VERSION
ARG TORCH_VERSION

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV TORCH_VERSION=${TORCH_VERSION}
ENV CUDA_VERSION=${CUDA_VERSION}

# Install Chocolatey package manager
RUN powershell -Command \
    "Set-ExecutionPolicy Bypass -Scope Process -Force; \
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; \
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')); \
    Write-Host 'Chocolatey installed successfully'"

# Install system dependencies using chocolatey (cached layer)
RUN powershell -Command \
    "Write-Host 'Installing Python 3.12...'; \
    choco install python312 -y; \
    Write-Host 'Installing Visual Studio Build Tools...'; \
    choco install visualstudio2019buildtools --package-parameters '--add Microsoft.VisualStudio.Workload.VCTools' -y; \
    Write-Host 'Installing Git...'; \
    choco install git -y; \
    Write-Host 'Installing NVIDIA CUDA Toolkit...'; \
    if ($env:CUDA_VERSION -eq '12.8.1') { \
        choco uninstall cuda -y --ignore-dependencies; \
        choco install cuda --version=12.8.1.572 -y; \
    } else { \
        choco uninstall cuda -y --ignore-dependencies; \
        choco install cuda --version=12.9.1.576 -y; \
    }; \
    Write-Host 'All dependencies installed successfully'"

# Refresh environment and verify Python installation
RUN powershell -Command \
    "Write-Host 'Refreshing environment after installations...'; \
    refreshenv; \
    Write-Host 'Checking Python installation...'; \
    if (Test-Path 'C:\\Python312\\python.exe') { \
        Write-Host 'Python found at C:\\Python312\\python.exe'; \
        & 'C:\\Python312\\python.exe' --version; \
    } else { \
        Write-Host 'Python not found at expected location, searching...'; \
        Get-ChildItem 'C:\\Python*' -ErrorAction SilentlyContinue | Select-Object Name, FullName; \
    }"

# Create virtual environment using full Python path
RUN C:\\Python312\\python.exe -m venv C:\\opt\\venv

# Copy CUDA setup script
COPY scripts/setup-cuda-windows.ps1 C:/setup-cuda.ps1

# Run CUDA detection and setup
RUN powershell -ExecutionPolicy Bypass -File C:/setup-cuda.ps1


# Set basic environment for current session - Python paths first
ENV PATH="C:\\Python312;C:\\Python312\\Scripts;C:\\Program Files\\Git\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0"

# Upgrade pip and install build tools (cached layer)
RUN C:\\opt\\venv\\Scripts\\python.exe -m pip install --upgrade pip setuptools wheel packaging

# Install PyTorch (cached layer, only rebuilds if versions change)
RUN powershell -Command \
    "if ($env:CUDA_VERSION -eq '12.8.1') { \
        & 'C:\\opt\\venv\\Scripts\\python.exe' -m pip install torch==$env:TORCH_VERSION torchvision --index-url https://download.pytorch.org/whl/cu128 \
    } else { \
        & 'C:\\opt\\venv\\Scripts\\python.exe' -m pip install torch==$env:TORCH_VERSION torchvision --index-url https://download.pytorch.org/whl/cu129 \
    }"

# Stage 2: Builder - compiles SageAttention wheel (wheel stays embedded)
FROM runtime AS builder

# Re-declare build ARGs for this stage
ARG TORCH_VERSION
ARG PYTHON_VERSION
ARG TORCH_CUDA_ARCH_LIST

# Set build environment variables from detected CUDA installation
ENV TORCH_CUDA_ARCH_LIST=${TORCH_CUDA_ARCH_LIST}
ENV PYTHON_VERSION=${PYTHON_VERSION}


# Get CUDA_HOME from machine environment and create nvcc alias
RUN powershell -Command \
    "$cudaHome = [Environment]::GetEnvironmentVariable('CUDA_HOME', 'Machine'); \
    Write-Host 'Build Configuration:'; \
    Write-Host '  TORCH_VERSION: $env:TORCH_VERSION'; \
    Write-Host '  PYTHON_VERSION: $env:PYTHON_VERSION'; \
    Write-Host '  CUDA_VERSION: $env:CUDA_VERSION'; \
    Write-Host '  TORCH_CUDA_ARCH_LIST: $env:TORCH_CUDA_ARCH_LIST'; \
    Write-Host \"  CUDA_HOME: $cudaHome\"; \
    Write-Host 'Checking CUDA compiler accessibility...'; \
    if ($cudaHome -and (Test-Path \"$cudaHome\\bin\\nvcc.exe\")) { \
        Write-Host \"nvcc.exe found at: $cudaHome\\bin\\nvcc.exe\"; \
        & \"$cudaHome\\bin\\nvcc.exe\" --version; \
        Write-Host 'Creating nvcc hard link for compatibility...'; \
        try { \
            New-Item -ItemType HardLink -Path \"$cudaHome\\bin\\nvcc\" -Target \"$cudaHome\\bin\\nvcc.exe\" -Force; \
            Write-Host 'Successfully created nvcc hard link'; \
            if (Test-Path \"$cudaHome\\bin\\nvcc\") { \
                Write-Host 'Verifying nvcc alias works...'; \
                & \"$cudaHome\\bin\\nvcc\" --version; \
            } \
        } catch { \
            Write-Host 'Hard link creation failed, trying copy...'; \
            Copy-Item \"$cudaHome\\bin\\nvcc.exe\" \"$cudaHome\\bin\\nvcc\" -Force; \
        }; \
        [Environment]::SetEnvironmentVariable('CUDA_HOME', $cudaHome, 'Process'); \
    } else { \
        Write-Host 'ERROR: nvcc.exe not found at expected location'; \
        throw 'CUDA installation verification failed'; \
    }"

# Copy source code for compilation
WORKDIR C:\\src
COPY . .

# Update pyproject.toml with correct PyTorch version
RUN C:\\opt\\venv\\Scripts\\python.exe update_pyproject.py

# Install build dependencies
RUN C:\\opt\\venv\\Scripts\\python.exe -m pip install numpy packaging pybind11

# Detect and create build script
RUN powershell -Command \
    "Write-Host 'Detecting Visual Studio Build Tools...'; \
    $vcvarsPath = $null; \
    $possiblePaths = @( \
        'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat', \
        'C:\\Program Files\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat', \
        'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\Common7\\Tools\\VsDevCmd.bat' \
    ); \
    foreach ($path in $possiblePaths) { \
        if (Test-Path $path) { \
            $vcvarsPath = $path; \
            Write-Host \"Found VS tools at: $path\"; \
            break; \
        } \
    }; \
    if (-not $vcvarsPath) { \
        Write-Host 'Standard paths not found, searching...'; \
        $found = Get-ChildItem 'C:\\Program Files*\\Microsoft Visual Studio' -Recurse -Name '*vcvars*.bat' -ErrorAction SilentlyContinue | Select-Object -First 1; \
        if ($found) { \
            $vcvarsPath = $found.FullName; \
            Write-Host \"Found alternative VS tools at: $vcvarsPath\"; \
        } else { \
            throw 'No Visual Studio Build Tools found'; \
        } \
    }; \
    $buildScript = '@echo off' + \"`r`n\" + \
                   \"call `\"$vcvarsPath`\"\" + \"`r`n\" + \
                   'C:\\opt\\venv\\Scripts\\python.exe setup.py bdist_wheel'; \
    Set-Content -Path 'C:\\src\\build.bat' -Value $buildScript -Encoding ASCII; \
    Write-Host 'Build script created with VS path:'; \
    Write-Host $vcvarsPath"

# Run the build with VS environment
RUN powershell -Command "& 'C:\\src\\build.bat'"

# Stage 3: Wheel extraction - outputs ONLY wheel files with automatic version naming
FROM scratch AS wheel
COPY --from=builder C:\\src\\dist\\*.whl /dist/

# Stage 4: Test - verifies the built wheel works correctly
FROM runtime AS test

# Re-declare ARGs for test stage
ARG TORCH_VERSION
ARG PYTHON_VERSION
ARG CUDA_VERSION

# Set test environment variables
ENV TORCH_VERSION=${TORCH_VERSION}
ENV PYTHON_VERSION=${PYTHON_VERSION}
ENV CUDA_VERSION=${CUDA_VERSION}

# Install and test the wheel directly from builder
COPY --from=builder C:/src/dist/*.whl C:/tmp/
RUN C:\\opt\\venv\\Scripts\\python.exe -m pip install C:\\tmp\\*.whl \
    && Remove-Item -Path C:\\tmp\\*.whl -Force

# Test SageAttention import and basic functionality
RUN C:\\opt\\venv\\Scripts\\python.exe -c "import sageattention; print('SageAttention imported successfully')"