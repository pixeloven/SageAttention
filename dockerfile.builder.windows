# SageAttention Builder - Clean Windows multi-stage build for SageAttention wheels
# Architecture: runtime → builder → extraction → test

# Build arguments for version flexibility
ARG CUDA_VERSION=12.9.1
ARG PYTHON_VERSION=3.12
ARG TORCH_VERSION=2.8.0
ARG TORCH_CUDA_ARCH_LIST=8.0;8.6;8.9;9.0;12.0

# Stage 1: Runtime environment with PyTorch and dependencies
FROM mcr.microsoft.com/powershell:7.4-windowsservercore-ltsc2022 AS runtime

# Re-declare ARGs after FROM
ARG CUDA_VERSION
ARG PYTHON_VERSION
ARG TORCH_VERSION

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV TORCH_VERSION=${TORCH_VERSION}
ENV CUDA_VERSION=${CUDA_VERSION}

# Install Chocolatey package manager
RUN powershell -Command \
    "Set-ExecutionPolicy Bypass -Scope Process -Force; \
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; \
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')); \
    Write-Host 'Chocolatey installed successfully'"

# Install system dependencies using chocolatey (cached layer)
RUN powershell -Command \
    "Write-Host 'Installing Python 3.12...'; \
    choco install python312 -y; \
    Write-Host 'Installing Visual Studio Build Tools...'; \
    choco install visualstudio2019buildtools --package-parameters '--add Microsoft.VisualStudio.Workload.VCTools' -y; \
    Write-Host 'Installing Git...'; \
    choco install git -y; \
    Write-Host 'Installing NVIDIA CUDA Toolkit...'; \
    if ($env:CUDA_VERSION -eq '12.8.1') { \
        choco uninstall cuda -y --ignore-dependencies; \
        choco install cuda --version=12.8.1 -y; \
    } else { \
        choco uninstall cuda -y --ignore-dependencies; \
        choco install cuda --version=12.9.1 -y; \
    }; \
    Write-Host 'All dependencies installed successfully'"

# Create virtual environment first
RUN python -m venv C:\\opt\\venv

# Check CUDA installation
RUN powershell -Command "Write-Host 'Checking CUDA installation...'; if (Test-Path 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA') { Get-ChildItem 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA' | Select-Object Name } else { Write-Host 'CUDA directory not found at expected location'; Get-ChildItem 'C:\\Program Files\\NVIDIA*' -ErrorAction SilentlyContinue | Select-Object Name; Write-Host 'Checking chocolatey CUDA installation...'; Get-ChildItem 'C:\\ProgramData\\chocolatey\\lib\\cuda*' -ErrorAction SilentlyContinue | Select-Object Name }"

# Set CUDA environment variables based on version and actual installation location
RUN powershell -Command \
    "$cudaPath = if (Test-Path 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA') { \
        if ($env:CUDA_VERSION -eq '12.8.1') { 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.8' } \
        else { 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.9' } \
    } elseif (Test-Path 'C:\\Program Files\\NVIDIA Corporation\\NVSMI') { \
        'C:\\Program Files\\NVIDIA Corporation\\NVSMI' \
    } else { \
        Write-Host 'Warning: CUDA installation not found in expected locations'; \
        'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.9' \
    }; \
    Write-Host \"Setting CUDA_HOME to: $cudaPath\"; \
    [Environment]::SetEnvironmentVariable('CUDA_HOME', $cudaPath, 'Machine')"

# Update PATH to include CUDA, Python, and other tools
RUN powershell -Command \
    "$cudaBin = if (Test-Path 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA') { \
        if ($env:CUDA_VERSION -eq '12.8.1') { 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.8\\bin' } \
        else { 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.9\\bin' } \
    } else { \
        'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.9\\bin' \
    }; \
    $newPath = \"C:\\opt\\venv\\Scripts;$cudaBin;C:\\Python312;C:\\Python312\\Scripts;C:\\Program Files\\Git\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\"; \
    Write-Host \"Setting PATH to: $newPath\"; \
    [Environment]::SetEnvironmentVariable('PATH', $newPath, 'Machine')"

# Set environment for current session - include CUDA paths
ENV PATH="C:\\opt\\venv\\Scripts;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.9\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.8\\bin;C:\\Python312;C:\\Python312\\Scripts;C:\\Program Files\\Git\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0"
ENV CUDA_HOME="C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.9"

# Upgrade pip and install build tools (cached layer)
RUN python -m pip install --upgrade pip setuptools wheel packaging

# Install PyTorch (cached layer, only rebuilds if versions change)
RUN C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Command \
    if ($env:CUDA_VERSION -eq '12.8.1') { \
        python -m pip install torch==$env:TORCH_VERSION torchvision --index-url https://download.pytorch.org/whl/cu128 \
    } else { \
        python -m pip install torch==$env:TORCH_VERSION torchvision --index-url https://download.pytorch.org/whl/cu129 \
    }

# Stage 2: Builder - compiles SageAttention wheel (wheel stays embedded)
FROM runtime AS builder

# Re-declare build ARGs for this stage
ARG TORCH_VERSION
ARG PYTHON_VERSION
ARG TORCH_CUDA_ARCH_LIST

# Set build environment variables
ENV TORCH_CUDA_ARCH_LIST=${TORCH_CUDA_ARCH_LIST}
ENV PYTHON_VERSION=${PYTHON_VERSION}
ENV CUDA_HOME="C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.9"
ENV PATH="C:\\opt\\venv\\Scripts;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.9\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.8\\bin;C:\\Python312;C:\\Python312\\Scripts;C:\\Program Files\\Git\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0"

# Verify build configuration and CUDA accessibility
RUN powershell -Command \
    "Write-Host 'Build Configuration:'; \
    Write-Host '  TORCH_VERSION: $env:TORCH_VERSION'; \
    Write-Host '  PYTHON_VERSION: $env:PYTHON_VERSION'; \
    Write-Host '  CUDA_VERSION: $env:CUDA_VERSION'; \
    Write-Host '  TORCH_CUDA_ARCH_LIST: $env:TORCH_CUDA_ARCH_LIST'; \
    Write-Host '  CUDA_HOME: $env:CUDA_HOME'; \
    Write-Host 'Checking CUDA compiler accessibility...'; \
    if (Test-Path '$env:CUDA_HOME\\bin\\nvcc.exe') { \
        Write-Host 'nvcc found at: $env:CUDA_HOME\\bin\\nvcc.exe'; \
        & '$env:CUDA_HOME\\bin\\nvcc.exe' --version; \
    } else { \
        Write-Host 'WARNING: nvcc not found at expected location'; \
        Write-Host 'Checking PATH for nvcc...'; \
        try { & nvcc --version } catch { Write-Host 'nvcc not accessible via PATH' }; \
    }"

# Copy source code for compilation
WORKDIR C:\\src
COPY . .

# Update pyproject.toml with correct PyTorch version
RUN python update_pyproject.py

# Install build dependencies
RUN python -m pip install numpy packaging pybind11

# Build SageAttention wheel
RUN python setup.py bdist_wheel

# Stage 3: Wheel extraction - outputs ONLY wheel files with automatic version naming
FROM scratch AS wheel
COPY --from=builder C:\\src\\dist\\*.whl /dist/

# Stage 4: Test - verifies the built wheel works correctly
FROM runtime AS test

# Re-declare ARGs for test stage
ARG TORCH_VERSION
ARG PYTHON_VERSION
ARG CUDA_VERSION

# Set test environment variables
ENV TORCH_VERSION=${TORCH_VERSION}
ENV PYTHON_VERSION=${PYTHON_VERSION}
ENV CUDA_VERSION=${CUDA_VERSION}

# Install and test the wheel directly from builder
COPY --from=builder C:/src/dist/*.whl C:/tmp/
RUN python -m pip install C:\\tmp\\*.whl \
    && Remove-Item -Path C:\\tmp\\*.whl -Force

# Test SageAttention import and basic functionality
RUN python -c "import sageattention; print('SageAttention imported successfully')"