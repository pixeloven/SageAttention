# SageAttention Builder - Clean Windows multi-stage build for SageAttention wheels
# Architecture: runtime → builder → extraction → test

# Build arguments for version flexibility
ARG CUDA_VERSION=12.9.1
ARG PYTHON_VERSION=3.12
ARG TORCH_VERSION=2.8.0
ARG TORCH_CUDA_ARCH_LIST=8.0;8.6;8.9;9.0;12.0

# Stage 1: Runtime environment with PyTorch and dependencies
FROM mcr.microsoft.com/powershell:7.4-windowsservercore-ltsc2022 AS runtime

# Re-declare ARGs after FROM
ARG CUDA_VERSION
ARG PYTHON_VERSION
ARG TORCH_VERSION

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV TORCH_VERSION=${TORCH_VERSION}
ENV CUDA_VERSION=${CUDA_VERSION}

# Install Chocolatey package manager
RUN powershell -Command \
    "Set-ExecutionPolicy Bypass -Scope Process -Force; \
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; \
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')); \
    Write-Host 'Chocolatey installed successfully'"

# Copy dependency installation script
COPY scripts/install-dependencies-windows.ps1 C:/install-dependencies.ps1

# Install system dependencies using chocolatey (cached layer)
RUN powershell -ExecutionPolicy Bypass -File C:/install-dependencies.ps1

# Copy Python verification script
COPY scripts/verify-python-windows.ps1 C:/verify-python.ps1

# Refresh environment and verify Python installation
RUN powershell -ExecutionPolicy Bypass -File C:/verify-python.ps1

# Create virtual environment using full Python path
RUN C:\\Python312\\python.exe -m venv C:\\opt\\venv

# Copy CUDA setup script
COPY scripts/setup-cuda-windows.ps1 C:/setup-cuda.ps1

# Run CUDA detection and setup
RUN powershell -ExecutionPolicy Bypass -File C:/setup-cuda.ps1


# Set basic environment for current session - Python paths first
ENV PATH="C:\\Python312;C:\\Python312\\Scripts;C:\\Program Files\\Git\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0"

# Upgrade pip and install build tools (cached layer)
RUN C:\\opt\\venv\\Scripts\\python.exe -m pip install --upgrade pip setuptools wheel packaging

# Install PyTorch (cached layer, only rebuilds if versions change)
RUN powershell -Command \
    "if ($env:CUDA_VERSION -eq '12.8.1') { \
        & 'C:\\opt\\venv\\Scripts\\python.exe' -m pip install torch==$env:TORCH_VERSION torchvision --index-url https://download.pytorch.org/whl/cu128 \
    } else { \
        & 'C:\\opt\\venv\\Scripts\\python.exe' -m pip install torch==$env:TORCH_VERSION torchvision --index-url https://download.pytorch.org/whl/cu129 \
    }"

# Stage 2: Builder - compiles SageAttention wheel (wheel stays embedded)
FROM runtime AS builder

# Re-declare build ARGs for this stage
ARG TORCH_VERSION
ARG PYTHON_VERSION
ARG TORCH_CUDA_ARCH_LIST

# Set build environment variables from detected CUDA installation
ENV TORCH_CUDA_ARCH_LIST=${TORCH_CUDA_ARCH_LIST}
ENV PYTHON_VERSION=${PYTHON_VERSION}


# Copy build environment setup script
COPY scripts/setup-build-environment-windows.ps1 C:/setup-build-env.ps1

# Get CUDA_HOME from machine environment and create nvcc alias
RUN powershell -ExecutionPolicy Bypass -File C:/setup-build-env.ps1

# Copy source code for compilation
WORKDIR C:\\src
COPY . .

# Update pyproject.toml with correct PyTorch version
RUN C:\\opt\\venv\\Scripts\\python.exe update_pyproject.py

# Install build dependencies
RUN C:\\opt\\venv\\Scripts\\python.exe -m pip install numpy packaging pybind11

# Copy Visual Studio detection script
COPY scripts/detect-visual-studio-windows.ps1 C:/detect-visual-studio.ps1

# Detect and create build script
RUN powershell -ExecutionPolicy Bypass -File C:/detect-visual-studio.ps1

# Run the build with VS environment
RUN powershell -Command "& 'C:\\src\\build.bat'"

# Stage 3: Wheel extraction - outputs ONLY wheel files with automatic version naming
FROM scratch AS wheel
COPY --from=builder C:\\src\\dist\\*.whl /dist/

# Stage 4: Test - verifies the built wheel works correctly
FROM runtime AS test

# Re-declare ARGs for test stage
ARG TORCH_VERSION
ARG PYTHON_VERSION
ARG CUDA_VERSION

# Set test environment variables
ENV TORCH_VERSION=${TORCH_VERSION}
ENV PYTHON_VERSION=${PYTHON_VERSION}
ENV CUDA_VERSION=${CUDA_VERSION}

# Install and test the wheel directly from builder
COPY --from=builder C:/src/dist/*.whl C:/tmp/
RUN C:\\opt\\venv\\Scripts\\python.exe -m pip install C:\\tmp\\*.whl \
    && Remove-Item -Path C:\\tmp\\*.whl -Force

# Test SageAttention import and basic functionality
RUN C:\\opt\\venv\\Scripts\\python.exe -c "import sageattention; print('SageAttention imported successfully')"