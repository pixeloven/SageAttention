# SageAttention Builder - Clean Windows multi-stage build for SageAttention wheels
# Architecture: runtime → builder → extraction → test

# Build arguments for version flexibility
ARG CUDA_VERSION=12.9.1
ARG PYTHON_VERSION=3.12
ARG TORCH_VERSION=2.8.0
ARG TORCH_CUDA_ARCH_LIST=8.0;8.6;8.9;9.0;12.0

# Stage 1: Runtime environment with PyTorch and dependencies
FROM mcr.microsoft.com/powershell:7.4-windowsservercore-ltsc2022 AS runtime

# Re-declare ARGs after FROM
ARG CUDA_VERSION
ARG PYTHON_VERSION
ARG TORCH_VERSION

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV TORCH_VERSION=${TORCH_VERSION}
ENV CUDA_VERSION=${CUDA_VERSION}

# Install Chocolatey and system dependencies (cached layer)
RUN C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Command \
    Set-ExecutionPolicy Bypass -Scope Process -Force; \
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; \
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')); \
    $env:PATH = \"C:\\ProgramData\\chocolatey\\bin;$env:PATH\"; \
    choco install -y python --version=3.12.8; \
    choco install -y visualstudio2019buildtools git

# Install CUDA Toolkit using corrected official URLs
RUN C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Command \
    if ($env:CUDA_VERSION -eq '12.8.1') { \
        $cudaUrl = 'https://developer.download.nvidia.com/compute/cuda/12.8.1/local_installers/cuda_12.8.1_551.78_windows.exe' \
    } else { \
        $cudaUrl = 'https://developer.download.nvidia.com/compute/cuda/12.9.1/local_installers/cuda_12.9.1_576.57_windows.exe' \
    }; \
    Write-Host \"Downloading CUDA from: $cudaUrl\"; \
    try { \
        Invoke-WebRequest -Uri $cudaUrl -OutFile 'C:\\cuda_installer.exe' -ErrorAction Stop; \
        Write-Host \"Installing CUDA toolkit silently...\"; \
        Start-Process -FilePath 'C:\\cuda_installer.exe' -ArgumentList '-s' -Wait -ErrorAction Stop; \
        Write-Host \"CUDA installation completed successfully\"; \
    } catch { \
        Write-Host \"Error during CUDA installation: $_\"; \
        throw \
    } finally { \
        if (Test-Path 'C:\\cuda_installer.exe') { Remove-Item 'C:\\cuda_installer.exe' -Force } \
    }

# Create virtual environment first
RUN python -m venv C:\\opt\\venv

# Set dynamic CUDA paths and final environment (verify actual installation paths)
RUN powershell -Command \
    "Write-Host 'Checking CUDA installation paths...'; \
    $$cudaBase = 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA'; \
    if (Test-Path $$cudaBase) { \
        $$cudaDirs = Get-ChildItem $$cudaBase | Where-Object { $$_.PSIsContainer } | Sort-Object Name; \
        Write-Host \"Found CUDA directories: $$($$cudaDirs.Name -join ', ')\"; \
        if ($$env:CUDA_VERSION -eq '12.8.1') { \
            $$cudaHome = (Get-ChildItem $$cudaBase | Where-Object { $$_.Name -like '*12.8*' } | Select-Object -First 1).FullName; \
        } else { \
            $$cudaHome = (Get-ChildItem $$cudaBase | Where-Object { $$_.Name -like '*12.9*' } | Select-Object -First 1).FullName; \
        }; \
        if ($$cudaHome -and (Test-Path $$cudaHome)) { \
            Write-Host \"Using CUDA_HOME: $$cudaHome\"; \
            $$cudaBin = \"$$cudaHome\\bin\"; \
            if (Test-Path \"$$cudaBin\\nvcc.exe\") { \
                Write-Host \"Found nvcc.exe at: $$cudaBin\\nvcc.exe\"; \
            } else { \
                Write-Host \"WARNING: nvcc.exe not found at: $$cudaBin\\nvcc.exe\"; \
                Get-ChildItem $$cudaHome -Recurse -Name \"nvcc.exe\" | ForEach-Object { Write-Host \"Found nvcc.exe at: $$_\" }; \
            }; \
            [Environment]::SetEnvironmentVariable('CUDA_HOME', $$cudaHome, 'Machine'); \
            $$newPath = \"C:\\opt\\venv\\Scripts;$$cudaBin;C:\\ProgramData\\chocolatey\\bin;C:\\Python312;C:\\Python312\\Scripts;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\\"; \
            [Environment]::SetEnvironmentVariable('PATH', $$newPath, 'Machine'); \
        } else { \
            Write-Host \"ERROR: CUDA home directory not found for version $$env:CUDA_VERSION\"; \
            throw \"CUDA installation verification failed\"; \
        } \
    } else { \
        Write-Host \"ERROR: CUDA base directory not found at $$cudaBase\"; \
        throw \"CUDA installation not found\"; \
    }"

# Set environment for current session
ENV PATH=C:\\opt\\venv\\Scripts;C:\\ProgramData\\chocolatey\\bin;C:\\Python312;C:\\Python312\\Scripts;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\

# Upgrade pip and install build tools (cached layer)
RUN python -m pip install --upgrade pip setuptools wheel packaging

# Install PyTorch (cached layer, only rebuilds if versions change)
RUN C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Command \
    if ($env:CUDA_VERSION -eq '12.8.1') { \
        python -m pip install torch==$env:TORCH_VERSION torchvision --index-url https://download.pytorch.org/whl/cu128 \
    } else { \
        python -m pip install torch==$env:TORCH_VERSION torchvision --index-url https://download.pytorch.org/whl/cu129 \
    }

# Stage 2: Builder - compiles SageAttention wheel (wheel stays embedded)
FROM runtime AS builder

# Re-declare build ARGs for this stage
ARG TORCH_VERSION
ARG PYTHON_VERSION
ARG TORCH_CUDA_ARCH_LIST

# Set build environment variables
ENV TORCH_CUDA_ARCH_LIST=${TORCH_CUDA_ARCH_LIST}
ENV PYTHON_VERSION=${PYTHON_VERSION}

# Verify build configuration
RUN powershell -Command \
    "Write-Host 'Build Configuration:'; \
    Write-Host '  TORCH_VERSION: $env:TORCH_VERSION'; \
    Write-Host '  PYTHON_VERSION: $env:PYTHON_VERSION'; \
    Write-Host '  CUDA_VERSION: $env:CUDA_VERSION'; \
    Write-Host '  TORCH_CUDA_ARCH_LIST: $env:TORCH_CUDA_ARCH_LIST'"

# Copy source code for compilation
WORKDIR C:\\src
COPY . .

# Update pyproject.toml with correct PyTorch version
RUN python update_pyproject.py

# Install build dependencies
RUN python -m pip install numpy packaging pybind11

# Build SageAttention wheel
RUN python setup.py bdist_wheel

# Stage 3: Wheel extraction - outputs ONLY wheel files with automatic version naming
FROM scratch AS wheel
COPY --from=builder C:\\src\\dist\\*.whl \\

# Stage 4: Test - verifies the built wheel works correctly
FROM runtime AS test

# Re-declare ARGs for test stage
ARG TORCH_VERSION
ARG PYTHON_VERSION
ARG CUDA_VERSION

# Set test environment variables
ENV TORCH_VERSION=${TORCH_VERSION}
ENV PYTHON_VERSION=${PYTHON_VERSION}
ENV CUDA_VERSION=${CUDA_VERSION}

# Install and test the wheel directly from builder
COPY --from=builder C:\\src\\dist\\*.whl C:\\tmp\\
RUN python -m pip install C:\\tmp\\*.whl \
    && Remove-Item -Path C:\\tmp\\*.whl -Force

# Test SageAttention import and basic functionality
RUN python -c "import sageattention; print('SageAttention imported successfully')"