# SageAttention Builder - Windows Container Multi-stage build for SageAttention wheels
# Supports Windows with multiple PyTorch versions

# Build arguments for version flexibility
ARG CUDA_VERSION=12.9.1
ARG PYTHON_VERSION=3.12
ARG TORCH_MINOR_VERSION=7
ARG TORCH_PATCH_VERSION=0
ARG TORCH_CUDA_ARCH_LIST="7.0;7.5;8.0;8.6;8.9;9.0"

# Stage 1: SageAttention Builder
FROM mcr.microsoft.com/windows/servercore:ltsc2022 AS sageattention-builder

# Set environment variables from ARGs
ENV CUDA_HOME="C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v${CUDA_VERSION}"
ENV PATH="%CUDA_HOME%\\bin;%PATH%"
ENV PYTHONUNBUFFERED=1
ENV TORCH_CUDA_ARCH_LIST=${TORCH_CUDA_ARCH_LIST}
ENV TORCH_MINOR_VERSION=${TORCH_MINOR_VERSION}
ENV TORCH_PATCH_VERSION=${TORCH_PATCH_VERSION}
ENV PYTHON_VERSION=${PYTHON_VERSION}
ENV CUDA_VERSION=${CUDA_VERSION}

# Install Chocolatey package manager (cached layer)
RUN powershell -Command \
    Set-ExecutionPolicy Bypass -Scope Process -Force; \
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; \
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

# Install Python and build tools (cached layer)
RUN choco install -y python${PYTHON_VERSION} visualstudio2019buildtools git

# Refresh environment variables
RUN refreshenv

# Create virtual environment (cached layer)
RUN python -m venv C:\\opt\\venv
ENV PATH=C:\\opt\\venv\\Scripts;%PATH%

# Upgrade pip and install build tools (cached layer)
RUN python -m pip install --upgrade pip setuptools wheel packaging

# Install PyTorch with appropriate CUDA support (cached layer)
ARG CUDA_SUFFIX
RUN if "%CUDA_SUFFIX%"=="" ( \
        python -m pip install torch==2.%TORCH_MINOR_VERSION%.%TORCH_PATCH_VERSION% torchvision --index-url https://download.pytorch.org/whl/cu%CUDA_VERSION:.=% \
    ) else ( \
        python -m pip install torch==2.%TORCH_MINOR_VERSION%.%TORCH_PATCH_VERSION% torchvision --index-url https://download.pytorch.org/whl/cu%CUDA_SUFFIX% \
    )

# Copy only dependency files first (cached layer for dependencies)
WORKDIR C:\\build
COPY pyproject.toml setup.py update_pyproject.py ./

# Install SageAttention build dependencies (cached layer)
RUN python -m pip install -e .

# Copy the local SageAttention source code (changes invalidate cache)
COPY . C:\\build\\SageAttention
WORKDIR C:\\build\\SageAttention

# Update pyproject.toml with correct PyTorch version
RUN python update_pyproject.py

# Build SageAttention wheel (changes invalidate cache)
RUN python setup.py bdist_wheel

# Stage 2: Wheel extraction
FROM scratch AS sageattention-wheel
COPY --from=sageattention-builder C:\\build\\SageAttention\\dist\\*.whl C:\\wheels

# Stage 3: Runtime verification
FROM mcr.microsoft.com/windows/servercore:ltsc2022 AS sageattention-test

# Install Python for testing
RUN powershell -Command \
    Set-ExecutionPolicy Bypass -Scope Process -Force; \
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; \
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

RUN choco install -y python${PYTHON_VERSION}

# Refresh environment variables
RUN refreshenv

# Create virtual environment
RUN python -m venv C:\\opt\\venv
ENV PATH=C:\\opt\\venv\\Scripts;%PATH%

# Install PyTorch and test the built wheel
RUN python -m pip install torch==2.%TORCH_MINOR_VERSION%.%TORCH_PATCH_VERSION% torchvision --index-url https://download.pytorch.org/whl/cu%CUDA_VERSION:.=%

# Copy and install the built wheel
COPY --from=sageattention-builder C:\\build\\SageAttention\\dist\\*.whl C:\\tmp
RUN python -m pip install C:\\tmp\\*.whl

# Test SageAttention import
RUN python -c "import sageattention; print('SageAttention imported successfully')"
