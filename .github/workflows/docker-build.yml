name: Docker Build - SageAttention Wheels (Optimized Multi-Stage)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      torch_version:
        description: "PyTorch version"
        required: false
        default: "2.8.0"
      cuda_version:
        description: "CUDA version"
        required: false
        default: "12.9.1"
      python_version:
        description: "Python version"
        required: false
        default: "3.12"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Validate Dockerfiles
  validate-dockerfiles:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run hadolint on Linux Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: dockerfile.builder.linux
          config: .hadolint.yaml
          failure-threshold: error

      - name: Run hadolint on Windows Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: dockerfile.builder.windows
          config: .hadolint.yaml
          failure-threshold: error

      - name: Dockerfile validation summary
        run: |
          echo "‚úÖ All Dockerfiles passed validation!"
          echo "This ensures syntax correctness and follows best practices before builds."

  # Job 2: Build wheels using Docker Bake - Cross-platform
  build-wheels:
    needs: validate-dockerfiles
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds - PyTorch 2.7 + CUDA 12.8
          - platform: linux
            build-target: "linux-pytorch27-cu128-python312"
          # Linux builds - PyTorch 2.8 + CUDA 12.9
          - platform: linux
            build-target: "linux-pytorch28-cu129-python312"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Free Disk Space (Aggressive)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Build wheels using Docker Bake
        uses: docker/bake-action@v4
        with:
          files: docker-bake.hcl
          targets: ${{ matrix.build-target }}
          set: |
            *.cache-from=type=gha,scope=build-${{ matrix.build-target }}
            *.cache-to=type=gha,scope=build-${{ matrix.build-target }},mode=max
          push: false

      - name: Test wheels using Docker Bake  
        uses: docker/bake-action@v4
        with:
          files: docker-bake.hcl
          targets: test-${{ matrix.build-target }}
          set: |
            *.cache-from=type=gha,scope=test-${{ matrix.build-target }}
            *.cache-to=type=gha,scope=test-${{ matrix.build-target }},mode=max
          push: false

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.build-target }}-${{ github.run_id }}
          path: ./dist/*.whl
          retention-days: 7

  # Job 3: Build Windows wheels (dedicated runner due to platform constraints)
  build-windows-wheels:
    needs: validate-dockerfiles
    runs-on: windows-2022
    strategy:
      matrix:
        include:
          # Windows builds - PyTorch 2.7 + CUDA 12.8
          - platform: windows
            build-target: "windows-pytorch27-cu128-python312"
          # Windows builds - PyTorch 2.8 + CUDA 12.9
          - platform: windows
            build-target: "windows-pytorch28-cu129-python312"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Free Disk Space (Windows)
        shell: powershell
        run: |
          # Get initial disk space
          Write-Output "=== BEFORE CLEANUP ==="
          Get-WmiObject -Class Win32_LogicalDisk | Select-Object Size,FreeSpace,DeviceID | Format-Table -AutoSize
          
          # Remove .NET frameworks
          Write-Output "Removing .NET components..."
          Get-ChildItem -Path "C:\Program Files\dotnet" -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
          
          # Remove unnecessary Windows features
          Write-Output "Removing Windows features..."
          Get-WindowsOptionalFeature -Online | Where-Object {$_.State -eq "Enabled" -and $_.FeatureName -match "IIS|SMB1|WindowsMediaPlayer"} | Disable-WindowsOptionalFeature -Online -Remove -NoRestart
          
          # Get final disk space
          Write-Output "=== AFTER CLEANUP ==="
          Get-WmiObject -Class Win32_LogicalDisk | Select-Object Size,FreeSpace,DeviceID | Format-Table -AutoSize

      - name: Build wheels using Docker Bake
        run: |
          # Use Docker Bake for Windows builds with local output
          docker buildx bake -f docker-bake.hcl ${{ matrix.build-target }} `
            --set "*.cache-from=type=gha,scope=build-${{ matrix.build-target }}" `
            --set "*.cache-to=type=gha,scope=build-${{ matrix.build-target }},mode=max"

      - name: Test wheels using Docker Bake
        run: |
          # Test the wheels using Docker Bake
          docker buildx bake -f docker-bake.hcl test-${{ matrix.build-target }} `
            --set "*.cache-from=type=gha,scope=test-${{ matrix.build-target }}" `
            --set "*.cache-to=type=gha,scope=test-${{ matrix.build-target }},mode=max"

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.build-target }}-${{ github.run_id }}
          path: ./dist/*.whl
          retention-days: 7

  # Job 4: Aggregate and summarize build results
  build-summary:
    needs: [build-wheels, build-windows-wheels]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-wheels

      - name: Display build results
        run: |
          echo "## üõ†Ô∏è SageAttention Wheel Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | PyTorch | CUDA | Python | Status | Wheel Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|---------|------|--------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          
          total_wheels=0
          for artifact_dir in ./all-wheels/wheels-*; do
            if [ -d "$artifact_dir" ]; then
              artifact_name=$(basename "$artifact_dir")
              wheel_count=$(find "$artifact_dir" -name "*.whl" | wc -l)
              total_wheels=$((total_wheels + wheel_count))
              
              # Parse artifact name for build details
              if [[ "$artifact_name" == *"linux"* ]]; then
                platform="üêß Linux"
              else
                platform="ü™ü Windows"
              fi
              
              if [[ "$artifact_name" == *"pytorch27"* ]]; then
                pytorch="2.7.0"
              else
                pytorch="2.8.0"
              fi
              
              if [[ "$artifact_name" == *"cu128"* ]]; then
                cuda="12.8"
              else
                cuda="12.9"
              fi
              
              if [ "$wheel_count" -gt 0 ]; then
                status="‚úÖ Success"
              else
                status="‚ùå Failed"
              fi
              
              echo "| $platform | $pytorch | $cuda | 3.12 | $status | $wheel_count |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total wheels built:** $total_wheels" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All wheels are available as GitHub Actions artifacts with 7-day retention." >> $GITHUB_STEP_SUMMARY

      - name: Check build success
        run: |
          wheel_count=$(find ./all-wheels -name "*.whl" 2>/dev/null | wc -l)
          if [ "$wheel_count" -eq 0 ]; then
            echo "‚ùå No wheels were built successfully"
            exit 1
          else
            echo "‚úÖ Build completed successfully with $wheel_count wheels"
          fi