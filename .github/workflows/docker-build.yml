name: Docker Build - SageAttention Wheels

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      torch_version:
        description: "PyTorch version"
        required: false
        default: "2.7.0"
      cuda_version:
        description: "CUDA version"
        required: false
        default: "12.9.1"
      python_version:
        description: "Python version"
        required: false
        default: "3.12"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build wheels using Docker (consistent builds)
  build-wheels-docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds - PyTorch 2.7
          - platform: linux
            python-version: "3.12"
            cuda-version: "12.9.1"
            torch-version: "2.7.0"
            cuda-arch: "8.0;8.6;8.9;9.0;12.0"
            cuda-minor: "9"
            torch-minor: "7"
            torch-patch: "0"
          # Linux builds - PyTorch 2.8
          - platform: linux
            python-version: "3.12"
            cuda-version: "12.9.1"
            torch-version: "2.8.0"
            cuda-arch: "8.0;8.6;8.9;9.0;12.0"
            cuda-minor: "9"
            torch-minor: "8"
            torch-patch: "0"
          # Windows builds - PyTorch 2.7
          - platform: windows
            python-version: "3.12"
            cuda-version: "12.9.1"
            torch-version: "2.7.0"
            cuda-arch: "8.0;8.6;8.9;9.0;12.0"
            cuda-minor: "9"
            torch-minor: "7"
            torch-patch: "0"
          # Windows builds - PyTorch 2.8
          - platform: windows
            python-version: "3.12"
            cuda-version: "12.9.1"
            torch-version: "2.8.0"
            cuda-arch: "8.0;8.6;8.9;9.0;12.0"
            cuda-minor: "9"
            torch-minor: "8"
            torch-patch: "0"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Build wheel using docker-bake
        run: |
          docker buildx bake --file docker-bake.hcl \
            --set "*.args.CUDA_VERSION=${{ matrix.cuda-version }}" \
            --set "*.args.PYTHON_VERSION=${{ matrix.python-version }}" \
            --set "*.args.TORCH_CUDA_ARCH_LIST=${{ matrix.cuda-arch }}" \
            --set "*.args.TORCH_MINOR_VERSION=${{ matrix.torch-minor }}" \
            --set "*.args.TORCH_PATCH_VERSION=${{ matrix.torch-patch }}" \
            --set "*.args.CUDA_MINOR_VERSION=${{ matrix.cuda-minor }}"

      - name: Rename wheel with proper naming convention
        run: |
          cd wheels
          for wheel in *.whl; do
            if [[ -f "$wheel" ]]; then
              # Extract version from wheel name
              version=$(echo "$wheel" | sed -n 's/sageattention-\([^-]*\)-.*/\1/p')
              # Generate wheel suffix dynamically
              wheel_suffix="cu${{ matrix.cuda-minor }}torch${{ matrix.torch-minor }}.${{ matrix.torch-patch }}"
              # Create new name with proper convention
              python_version_clean=$(echo ${{ matrix.python-version }} | tr -d '.')
              if [[ "${{ matrix.platform }}" == "windows" ]]; then
                platform_suffix="win_amd64"
              else
                platform_suffix="manylinux_x86_64"
              fi
              new_name="sageattention-${version}+${wheel_suffix}-cp${python_version_clean}-cp${python_version_clean}-${platform_suffix}.whl"
              mv "$wheel" "$new_name"
              echo "Renamed $wheel to $new_name"
            fi
          done

      # Test wheel using Docker
      - name: Test wheel using Docker
        run: |
          docker buildx bake --file docker-bake.hcl test \
            --set "*.args.CUDA_VERSION=${{ matrix.cuda-version }}" \
            --set "*.args.PYTHON_VERSION=${{ matrix.python-version }}" \
            --set "*.args.TORCH_CUDA_ARCH_LIST=${{ matrix.cuda-arch }}" \
            --set "*.args.TORCH_MINOR_VERSION=${{ matrix.torch-minor }}" \
            --set "*.args.TORCH_PATCH_VERSION=${{ matrix.torch-patch }}" \
            --set "*.args.CUDA_MINOR_VERSION=${{ matrix.cuda-minor }}"

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sageattention-docker-wheels-${{ matrix.platform }}
          path: wheels/*.whl
          retention-days: 7

  # Job 2: Publish wheels
  publish-wheels-docker:
    needs: build-wheels-docker
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: sageattention-docker-wheels-*

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install twine
        run: |
          pip install twine

      - name: Create PyPI configuration
        run: |
          cat > ~/.pypirc << EOF
          [distutils]
          index-servers =
              github
          
          [github]
          repository = https://github.com/${{ github.repository }}/packages/pypi
          username = ${{ github.actor }}
          password = ${{ secrets.GITHUB_TOKEN }}
          EOF

      - name: Publish to GitHub Packages
        run: |
          # Find all wheel files
          find . -name "*.whl" -type f | while read wheel; do
            echo "Uploading $wheel to GitHub Packages..."
            twine upload --repository github "$wheel"
          done

  # Job 3: Compare build results
  compare-builds:
    needs: [build-wheels-docker]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Docker wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: sageattention-docker-wheels-*

      - name: Compare build results
        run: |
          echo "=== Docker Build Results ==="
          echo "Wheels built:"
          find . -name "*.whl" -type f | sort
          
          echo ""
          echo "Wheel sizes:"
          find . -name "*.whl" -type f -exec ls -lh {} \;
          
          echo ""
          echo "Build summary:"
          echo "- Docker builds completed successfully"
          echo "- All platforms supported: Linux and Windows"
          echo "- CUDA 12.9.1 with PyTorch 2.7.0 and 2.8.0"
          echo "- Consistent builds using Docker containers"
