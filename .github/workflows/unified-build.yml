name: SageAttention Wheels - Direct Compilation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      torch_version:
        description: "PyTorch version"
        required: false
        default: "2.7.0"
      cuda_version:
        description: "CUDA version"
        required: false
        default: "12.9.1"
      python_version:
        description: "Python version"
        required: false
        default: "3.12"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build wheels (direct compilation - no Docker)
  build-wheels:
    strategy:
      matrix:
        include:
          # Linux builds - PyTorch 2.7
          - os: ubuntu-latest
            platform: linux
            python-version: "3.12"
            torch-version: "2.7.0"
            cuda-version: "12.9.1"
            cuda-arch: "8.0 8.6 8.9 9.0 12.0"
            cuda-minor: "9"
            torch-minor: "7"
            torch-patch: "0"
          # Linux builds - PyTorch 2.8
          - os: ubuntu-latest
            platform: linux
            python-version: "3.12"
            torch-version: "2.8.0"
            cuda-version: "12.9.1"
            cuda-arch: "8.0 8.6 8.9 9.0 12.0"
            cuda-minor: "9"
            torch-minor: "8"
            torch-patch: "0"
          # Windows builds - PyTorch 2.7
          - os: windows-latest
            platform: windows
            python-version: "3.12"
            torch-version: "2.7.0"
            cuda-version: "12.9.1"
            cuda-arch: "8.0 8.6 8.9 9.0 12.0"
            cuda-minor: "9"
            torch-minor: "7"
            torch-patch: "0"
          # Windows builds - PyTorch 2.8
          - os: windows-latest
            platform: windows
            python-version: "3.12"
            torch-version: "2.8.0"
            cuda-version: "12.9.1"
            cuda-arch: "8.0 8.6 8.9 9.0 12.0"
            cuda-minor: "9"
            torch-minor: "8"
            torch-patch: "0"

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Platform-specific setup
      - name: Set up CUDA (Linux)
        if: matrix.platform == 'linux'
        run: |
          # Ubuntu runners have CUDA pre-installed
          echo "Using pre-installed CUDA on Ubuntu runner"
          echo "CUDA_HOME=/usr/local/cuda" >> $GITHUB_ENV
          echo "CUDA_ROOT=/usr/local/cuda" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PATH=/usr/local/cuda/bin:$PATH" >> $GITHUB_ENV

      - name: Set up CUDA (Windows)
        if: matrix.platform == 'windows'
        run: |
          # Install CUDA 12.9 on Windows using chocolatey
          echo "Installing CUDA 12.9 on Windows"
          
          # Install chocolatey if not available
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          
          # Install CUDA 12.9 using chocolatey
          choco install cuda --version=12.9.0 -y
          
          # Set environment variables
          echo "CUDA_HOME=C:\ProgramData\chocolatey\lib\cuda\tools\cuda\v12.9" >> $GITHUB_ENV
          echo "CUDA_ROOT=C:\ProgramData\chocolatey\lib\cuda\tools\cuda\v12.9" >> $GITHUB_ENV
          echo "PATH=C:\ProgramData\chocolatey\lib\cuda\tools\cuda\v12.9\bin;$PATH" >> $GITHUB_ENV

      - name: Set up MSVC (Windows)
        if: matrix.platform == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      # Verify CUDA installation
      - name: Verify CUDA installation
        run: |
          echo "CUDA_HOME: $CUDA_HOME"
          echo "CUDA_ROOT: $CUDA_ROOT"
          echo "PATH: $PATH"
          echo "Environment variables:"
          env | grep -i cuda || echo "No CUDA environment variables found"
          which nvcc || echo "nvcc not found in PATH"
          nvcc --version || echo "nvcc not found or not working"

      # Install cibuildwheel
      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel

      # Set environment variables
      - name: Set build environment
        run: |
          echo "TORCH_CUDA_ARCH_LIST=${{ matrix.cuda-arch }}" >> $GITHUB_ENV
          echo "CUDA_MINOR_VERSION=${{ matrix.cuda-minor }}" >> $GITHUB_ENV
          echo "TORCH_MINOR_VERSION=${{ matrix.torch-minor }}" >> $GITHUB_ENV
          echo "TORCH_PATCH_VERSION=${{ matrix.torch-patch }}" >> $GITHUB_ENV
          echo "SAGEATTENTION_WHEEL_VERSION_SUFFIX=+cu${{ matrix.cuda-minor }}torch${{ matrix.torch-minor }}.${{ matrix.torch-patch }}" >> $GITHUB_ENV
          echo "DISTUTILS_USE_SDK=1" >> $GITHUB_ENV
          echo "CIBW_BUILD_VERBOSITY=1" >> $GITHUB_ENV
          echo "CIBW_DEPENDENCY_VERSIONS=latest" >> $GITHUB_ENV

      # Build wheels using cibuildwheel
      - name: Build wheels using cibuildwheel
        run: |
          # Set cibuildwheel environment variables based on platform
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            export CIBW_BUILD="cp312-win_amd64"
          else
            export CIBW_BUILD="cp312-manylinux_x86_64"
          fi
          
          export CIBW_BEFORE_BUILD="python update_pyproject.py"
          export CIBW_BEFORE_ALL="pip install --upgrade pip setuptools wheel packaging"
          
          # Build for the specific platform
          cibuildwheel --platform ${{ matrix.platform }} --output-dir wheelhouse .

      # Upload wheel artifacts
      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sageattention-wheels-${{ matrix.platform }}
          path: wheelhouse/*.whl
          retention-days: 7

  # Job 2: Test wheels (direct installation)
  test-wheels:
    needs: build-wheels
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python-version: 3.12
            torch-version: 2.7.0
            cuda-version: 12.9.1
            cuda-arch-list: "7.0;7.5;8.0;8.6;8.9;9.0"
            torch-minor-version: 7
            torch-patch-version: 0
            cuda-minor-version: 9

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install CUDA (Linux)
        if: matrix.platform == 'linux'
        run: |
          echo "Using pre-installed CUDA on Ubuntu runner"
          echo "CUDA_HOME=/usr/local/cuda" >> $GITHUB_ENV
          echo "CUDA_ROOT=/usr/local/cuda" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PATH=/usr/local/cuda/bin:$PATH" >> $GITHUB_ENV

      # Download wheels for testing
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: sageattention-wheels-*

      # Test wheels (direct installation)
      - name: Test wheels
        run: |
          # Install PyTorch
          pip install torch==${{ matrix.torch-version }} torchvision --index-url https://download.pytorch.org/whl/cu${{ matrix.cuda-minor-version }}9
          
          # Install and test the built wheel
          find . -name "*.whl" -type f | head -1 | while read wheel; do
            echo "Testing wheel: $wheel"
            pip install "$wheel"
            python -c "import sageattention; print('SageAttention imported successfully')"
          done

  # Job 3: Publish wheels (direct compilation approach)
  publish-wheels:
    needs: [build-wheels, test-wheels]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: sageattention-wheels-*

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install twine
        run: |
          pip install twine

      - name: Create PyPI configuration
        run: |
          cat > ~/.pypirc << EOF
          [distutils]
          index-servers =
              github
          
          [github]
          repository = https://github.com/${{ github.repository }}/packages/pypi
          username = ${{ github.actor }}
          password = ${{ secrets.GITHUB_TOKEN }}
          EOF

      - name: Publish to GitHub Packages
        run: |
          # Find all wheel files
          find . -name "*.whl" -type f | while read wheel; do
            echo "Uploading $wheel to GitHub Packages (direct compilation)..."
            twine upload --repository github "$wheel"
          done

      - name: Compare build results
        run: |
          echo "=== Direct Compilation Build Results ==="
          echo "Wheels built:"
          find . -name "*.whl" -type f | sort
          echo ""
          echo "Wheel sizes:"
          find . -name "*.whl" -type f -exec ls -lh {} \;
          echo ""
          echo "Build summary:"
          echo "- Direct compilation builds completed successfully"
          echo "- Linux builds using cibuildwheel"
          echo "- CUDA 12.9.1 with PyTorch 2.7.0"
          echo "- No Docker dependencies for build process"
