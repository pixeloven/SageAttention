name: SageAttention Wheels

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Validate Dockerfiles
  validate-dockerfiles:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run hadolint on Linux Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: dockerfile.builder.linux
          config: .hadolint.yaml
          failure-threshold: error


      - name: Dockerfile validation summary
        run: |
          echo "‚úÖ Linux Dockerfile passed validation!"
          echo "This ensures syntax correctness and follows best practices before builds."

  # Job 2: Build Windows wheels using native toolchain
  # build-windows-wheels:
  #   needs: validate-dockerfiles
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       include:
  #         # Windows builds - PyTorch 2.7 + CUDA 12.8
  #         - platform: windows
  #           pytorch_version: "2.7.0"
  #           cuda_version: "12.8.1"
  #           python_version: "3.12"
  #           build_name: "windows-pytorch27-cu128-python312"
  #         # Windows builds - PyTorch 2.8 + CUDA 12.9  
  #         - platform: windows
  #           pytorch_version: "2.8.0"
  #           cuda_version: "12.9.1"
  #           python_version: "3.12"
  #           build_name: "windows-pytorch28-cu129-python312"

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Setup Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python_version }}

  #     - name: Setup CUDA Toolkit
  #       uses: Jimver/cuda-toolkit@v0.2.21
  #       with:
  #         cuda: ${{ matrix.cuda_version }}
  #         method: network
  #         sub-packages: '["nvcc", "cudart", "curand", "cufft", "cublas", "cusparse", "cusolver", "thrust"]'

  #     - name: Setup MSVC
  #       uses: ilammy/msvc-dev-cmd@v1
  #       with:
  #         arch: x64

  #     - name: Configure git for line endings
  #       run: |
  #         git config --global core.autocrlf false
  #         git config --global core.eol lf

  #     - name: Update Python packaging tools
  #       run: |
  #         python -m pip install --upgrade pip setuptools wheel packaging

  #     - name: Install PyTorch
  #       run: |
  #         if ("${{ matrix.cuda_version }}" -like "12.8*") {
  #           pip install torch==${{ matrix.pytorch_version }} torchvision --index-url https://download.pytorch.org/whl/cu118
  #         } else {
  #           pip install torch==${{ matrix.pytorch_version }} torchvision --index-url https://download.pytorch.org/whl/cu121
  #         }
  #       shell: powershell

  #     - name: Install build dependencies
  #       run: |
  #         pip install numpy packaging pybind11

  #     - name: Set build environment variables
  #       run: |
  #         echo "TORCH_VERSION=${{ matrix.pytorch_version }}" >> $env:GITHUB_ENV
  #         echo "CUDA_VERSION=${{ matrix.cuda_version }}" >> $env:GITHUB_ENV
  #         echo "TORCH_CUDA_ARCH_LIST=8.0;8.6;8.9;9.0" >> $env:GITHUB_ENV
  #         echo "PYTHON_VERSION=${{ matrix.python_version }}" >> $env:GITHUB_ENV
  #       shell: powershell

  #     - name: Update pyproject.toml with correct PyTorch version
  #       run: python update_pyproject.py

  #     - name: Build wheel
  #       run: |
  #         python setup.py bdist_wheel
  #       env:
  #         TORCH_VERSION: ${{ matrix.pytorch_version }}
  #         CUDA_VERSION: ${{ matrix.cuda_version }}
  #         TORCH_CUDA_ARCH_LIST: "8.0;8.6;8.9;9.0"

  #     - name: Test wheel installation
  #       run: |
  #         $wheels = Get-ChildItem -Path "dist" -Filter "*.whl"
  #         if ($wheels.Count -eq 0) {
  #           Write-Error "No wheels found in dist directory"
  #           exit 1
  #         }
  #         pip install $wheels[0].FullName
  #         python -c "import sageattention; print('‚úÖ SageAttention imported successfully')"
  #       shell: powershell

  #     - name: Upload wheel artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-${{ matrix.build_name }}-${{ github.run_id }}
  #         path: ./dist/*.whl
  #         retention-days: 7

  # Job 3: Build Linux wheels using Docker Bake
  build-linux-wheels:
    needs: validate-dockerfiles
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds - PyTorch 2.7 + CUDA 12.8
          - platform: linux
            build-target: "linux-pytorch27-cu128-python312"
          # Linux builds - PyTorch 2.8 + CUDA 12.9
          - platform: linux
            build-target: "linux-pytorch28-cu129-python312"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free Disk Space (Aggressive)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build wheels using Docker Bake
        uses: docker/bake-action@v6
        with:
          files: docker-bake.hcl
          targets: ${{ matrix.build-target }}
          set: |
            *.cache-from=type=gha,scope=build-${{ matrix.build-target }}
            *.cache-to=type=gha,scope=build-${{ matrix.build-target }},mode=max
          push: false

      - name: Test wheels using Docker Bake  
        uses: docker/bake-action@v6
        with:
          files: docker-bake.hcl
          targets: test-${{ matrix.build-target }}
          set: |
            *.cache-from=type=gha,scope=test-${{ matrix.build-target }}
            *.cache-to=type=gha,scope=test-${{ matrix.build-target }},mode=max
          push: false

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.build-target }}-${{ github.run_id }}
          path: ./dist/*.whl
          retention-days: 7


  # Job 4: Aggregate and summarize build results
  build-summary:
    needs: [build-linux-wheels]
    # needs: [build-windows-wheels, build-linux-wheels]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-wheels

      - name: Display build results
        run: |
          echo "## üõ†Ô∏è SageAttention Wheel Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | PyTorch | CUDA | Python | Status | Wheel Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|---------|------|--------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          
          total_wheels=0
          for artifact_dir in ./all-wheels/wheels-*; do
            if [ -d "$artifact_dir" ]; then
              artifact_name=$(basename "$artifact_dir")
              wheel_count=$(find "$artifact_dir" -name "*.whl" | wc -l)
              total_wheels=$((total_wheels + wheel_count))
              
              # Parse artifact name for build details
              if [[ "$artifact_name" == *"windows"* ]]; then
                platform="ü™ü Windows"
              else
                platform="üêß Linux"
              fi
              
              if [[ "$artifact_name" == *"pytorch27"* ]]; then
                pytorch="2.7.0"
              else
                pytorch="2.8.0"
              fi
              
              if [[ "$artifact_name" == *"cu128"* ]]; then
                cuda="12.8"
              else
                cuda="12.9"
              fi
              
              if [ "$wheel_count" -gt 0 ]; then
                status="‚úÖ Success"
              else
                status="‚ùå Failed"
              fi
              
              echo "| $platform | $pytorch | $cuda | 3.12 | $status | $wheel_count |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total wheels built:** $total_wheels" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All wheels are available as GitHub Actions artifacts with 7-day retention." >> $GITHUB_STEP_SUMMARY

      - name: Check build success
        run: |
          wheel_count=$(find ./all-wheels -name "*.whl" 2>/dev/null | wc -l)
          if [ "$wheel_count" -eq 0 ]; then
            echo "‚ùå No wheels were built successfully"
            exit 1
          else
            echo "‚úÖ Build completed successfully with $wheel_count wheels"
          fi

  # Job 5: Create release and tag (main branch only)
  release:
    needs: [build-summary]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.build-summary.result == 'success'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-wheels

      - name: Prepare wheels for publishing
        run: |
          mkdir -p dist
          find ./all-wheels -name "*.whl" -exec cp {} dist/ \;
          ls -la dist/
          echo "Found $(ls dist/*.whl | wc -l) wheels to publish"

      - name: Extract version from pyproject.toml
        id: version
        run: |
          pip install toml
          python -c "import toml; print('version=' + toml.load('pyproject.toml')['project']['version'])" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.version.outputs.version }}"
          name: "Release v${{ steps.version.outputs.version }}"
          files: dist/*.whl
          generate_release_notes: true
          make_latest: true