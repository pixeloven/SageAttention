name: SageAttention Windows Wheels - Direct Compilation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      torch_version:
        description: "PyTorch version"
        required: false
        default: "2.7.0"
      cuda_version:
        description: "CUDA version"
        required: false
        default: "12.9.1"
      python_version:
        description: "Python version"
        required: false
        default: "3.12"

jobs:
  # Job 1: Build Windows wheels using cibuildwheel (direct compilation)
  build-windows-wheels:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          # Windows builds - PyTorch 2.7
          - python-version: "3.12"
            torch-version: "2.7.0"
            cuda-version: "12.9.1"
            cuda-arch: "8.0 8.6 8.9 9.0 12.0"
            cuda-minor: "9"
            torch-minor: "7"
            torch-patch: "0"
          # Windows builds - PyTorch 2.8
          - python-version: "3.12"
            torch-version: "2.8.0"
            cuda-version: "12.9.1"
            cuda-arch: "8.0 8.6 8.9 9.0 12.0"
            cuda-minor: "9"
            torch-minor: "8"
            torch-patch: "0"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up CUDA (Windows)
        run: |
          # Try to install CUDA on Windows using chocolatey
          echo "Attempting to install CUDA on Windows"
          
          # Install chocolatey if not available
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          
          # Try to install CUDA using chocolatey
          choco install cuda -y
          
          # Set environment variables regardless of installation result
          echo "CUDA_HOME=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.4" >> $GITHUB_ENV
          echo "CUDA_ROOT=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.4" >> $GITHUB_ENV
          echo "PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.4\bin;$PATH" >> $GITHUB_ENV

      - name: Set up MSVC (Windows)
        uses: ilammy/msvc-dev-cmd@v1

      # Verify CUDA installation
      - name: Verify CUDA installation
        run: |
          echo "CUDA_HOME: $env:CUDA_HOME"
          echo "CUDA_ROOT: $env:CUDA_ROOT"
          echo "PATH: $env:PATH"
          echo "Environment variables:"
          Get-ChildItem Env: | Where-Object { $_.Name -like "*CUDA*" } | ForEach-Object { Write-Host "$($_.Name)=$($_.Value)" }
          
          # Check if nvcc is available
          try {
            $nvccPath = Get-Command nvcc -ErrorAction SilentlyContinue
            if ($nvccPath) {
              Write-Host "nvcc found at: $($nvccPath.Source)"
              nvcc --version
            } else {
              Write-Host "nvcc not found - Windows builds may proceed without CUDA"
            }
          } catch {
            Write-Host "nvcc not found - Windows builds may proceed without CUDA"
          }

      # Install cibuildwheel
      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel

      # Set environment variables
      - name: Set build environment
        run: |
          echo "TORCH_CUDA_ARCH_LIST=${{ matrix.cuda-arch }}" >> $GITHUB_ENV
          echo "CUDA_MINOR_VERSION=${{ matrix.cuda-minor }}" >> $GITHUB_ENV
          echo "TORCH_MINOR_VERSION=${{ matrix.torch-minor }}" >> $GITHUB_ENV
          echo "TORCH_PATCH_VERSION=${{ matrix.torch-patch }}" >> $GITHUB_ENV
          echo "SAGEATTENTION_WHEEL_VERSION_SUFFIX=+cu${{ matrix.cuda-minor }}torch${{ matrix.torch-minor }}.${{ matrix.torch-patch }}" >> $GITHUB_ENV
          echo "DISTUTILS_USE_SDK=1" >> $GITHUB_ENV
          echo "CIBW_BUILD_VERBOSITY=1" >> $GITHUB_ENV
          echo "CIBW_DEPENDENCY_VERSIONS=latest" >> $GITHUB_ENV
          echo "TORCH_CUDA_ARCH_LIST_CPU=7.0;7.5;8.0;8.6;8.9;9.0" >> $GITHUB_ENV

      # Build wheels using cibuildwheel
      - name: Build wheels using cibuildwheel
        run: |
          # Check if CUDA is actually available
          if (Test-Path "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA") {
            $env:CIBW_BUILD="cp312-win_amd64"
            $env:CIBW_BEFORE_BUILD="python update_pyproject.py"
            $env:CIBW_BEFORE_ALL="pip install --upgrade pip setuptools wheel packaging"
            $env:TORCH_CUDA_ARCH_LIST="8.0 8.6 8.9 9.0 12.0"
            echo "CUDA found, building with GPU support"
            
            cibuildwheel --platform windows --output-dir wheelhouse .
          } else {
            echo "CUDA not found on Windows runner"
            echo "SageAttention requires CUDA for compilation - skipping Windows build"
            echo "Windows builds are currently not supported due to CUDA installation issues"
            
            # Create a placeholder file to indicate the build was attempted
            New-Item -ItemType Directory -Force -Path "wheelhouse"
            "SageAttention Windows builds require CUDA installation which is not available on GitHub Windows runners." | Out-File -FilePath "wheelhouse\windows_build_not_supported.txt" -Encoding UTF8
          }

      # Upload wheel artifacts
      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sageattention-windows-wheels
          path: wheelhouse/*.whl
          retention-days: 7

  # Job 2: Test Windows wheels
  test-windows-wheels:
    needs: build-windows-wheels
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - python-version: 3.12
            torch-version: 2.7.0
            cuda-version: 12.9.1
            cuda-arch-list: "7.0;7.5;8.0;8.6;8.9;9.0"
            torch-minor-version: 7
            torch-patch-version: 0
            cuda-minor-version: 9

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Download wheels for testing
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: sageattention-windows-wheels

      # Test wheels
      - name: Test wheels
        run: |
          # Check if wheels were built
          $wheels = Get-ChildItem -Filter "*.whl" -Recurse
          if ($wheels) {
            # Install PyTorch
            pip install torch==${{ matrix.torch-version }} torchvision --index-url https://download.pytorch.org/whl/cu${{ matrix.cuda-minor-version }}9
            
            # Install and test the built wheel
            $wheels | Select-Object -First 1 | ForEach-Object {
              Write-Host "Testing wheel: $($_.Name)"
              pip install $_.FullName
              python -c "import sageattention; print('SageAttention imported successfully')"
            }
          } else {
            Write-Host "No wheels found to test - Windows builds not supported"
          }

  # Job 3: Publish Windows wheels
  publish-windows-wheels:
    needs: [build-windows-wheels, test-windows-wheels]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: sageattention-windows-wheels

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install twine
        run: |
          pip install twine

      - name: Create PyPI configuration
        run: |
          cat > ~/.pypirc << EOF
          [distutils]
          index-servers =
              github
          [github]
          repository = https://github.com/${{ github.repository }}/packages/pypi
          username = ${{ github.actor }}
          password = ${{ secrets.GITHUB_TOKEN }}
          EOF

      - name: Publish to GitHub Packages
        run: |
          # Check if wheels were built
          if find . -name "*.whl" -type f | grep -q .; then
            find . -name "*.whl" -type f | while read wheel; do
              echo "Uploading $wheel to GitHub Packages (Windows direct compilation)..."
              twine upload --repository github "$wheel"
            done
          else
            echo "No wheels to publish - Windows builds not supported due to CUDA requirements"
          fi

      - name: Compare build results
        run: |
          echo "=== Windows Direct Compilation Build Results ==="
          echo "Wheels built:"
          if find . -name "*.whl" -type f | grep -q .; then
            find . -name "*.whl" -type f | sort
            echo ""
            echo "Wheel sizes:"
            find . -name "*.whl" -type f -exec ls -lh {} \;
            echo ""
            echo "Build summary:"
            echo "- Windows direct compilation builds completed successfully"
            echo "- Using cibuildwheel for consistent builds"
            echo "- CUDA 12.9.1 with PyTorch 2.7.0 and 2.8.0"
            echo "- No Docker dependencies for build process"
          else
            echo "No wheels built"
            echo ""
            echo "Build summary:"
            echo "- Windows builds not supported due to CUDA installation issues"
            echo "- SageAttention requires CUDA for compilation"
            echo "- GitHub Windows runners do not have CUDA pre-installed"
            echo "- Consider using Linux builds or Docker-based builds for Windows"
          fi
